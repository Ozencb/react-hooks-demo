{"version":3,"sources":["components/FetchHook.js","components/Profiles.js","components/Repos.js","components/Card.js","App.js","serviceWorker.js","index.js"],"names":["useFetch","url","useState","data","setData","loading","setLoading","useEffect","a","async","fetch","response","json","returned_data","JSON","parse","stringify","fetchUrl","Profiles","props","className","src","users","count","avatar_url","alt","href","login","replace","txt","charAt","toUpperCase","substr","toLowerCase","Repos","userRepos","sort","b","stargazers_count","map","repo","key","id","html_url","icon","faStar","name","slice","Card","setCount","counter","direction","length","faAngleLeft","size","onClick","faAngleRight","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2UAMA,SAASA,EAASC,GAAM,IAAD,EACGC,mBAAS,MADZ,mBACdC,EADc,KACRC,EADQ,OAESF,oBAAS,GAFlB,mBAEdG,EAFc,KAELC,EAFK,KAmBrB,OALAC,qBAAU,YAVV,uBAAAC,EAAAC,OAAA,kEAAAD,EAAA,MACyBE,MAAMT,IAD/B,cACQU,EADR,kBAAAH,EAAA,MAEqBG,EAASC,QAF9B,OAEQA,EAFR,OAIQ,YADFC,EAAgBC,KAAKC,MAAMD,KAAKE,UAAUJ,OAE5CR,EAAQS,GACRP,GAAW,IANf,qCAWEW,KACC,CAAChB,IAGG,CAACE,EAAME,G,MCWDa,MApBf,SAAkBC,GAChB,OACE,yBAAKC,UAAU,YACb,yBACEA,UAAU,gBACVC,IAAKF,EAAMG,MAAMH,EAAMI,OAAOC,WAC9BC,IAAI,KAEN,yBAAKL,UAAU,YACb,uBAAGM,KAAMP,EAAMG,MAAMH,EAAMI,OAAOtB,KAC7BkB,EAAMG,MAAMH,EAAMI,OAAOI,MAAMC,QAAQ,UAAU,SAASC,GACzD,OAAOA,EAAIC,OAAO,GAAGC,cAAgBF,EAAIG,OAAO,GAAGC,qB,2BCiBlDC,MA/Bf,SAAef,GAAQ,IAAD,EACcnB,EAAS,gCAAD,OAAiCmB,EAAMG,MAAMH,EAAMI,OAAOI,MAA1D,WADtB,mBACbQ,EADa,KASpB,OAToB,KAUlB,8BAGA,yBAAKf,UAAU,SACb,6BAEEe,EAAUC,MAAK,SAAC5B,EAAG6B,GAAJ,OAAW7B,EAAE8B,iBAAmBD,EAAEC,iBAAoB,GAAK,KAChEC,KAAI,SAASC,GACX,OACE,yBAAKpB,UAAU,OAAOqB,IAAKD,EAAKE,IAC9B,uBAAGhB,KAAMc,EAAKG,UACZ,kBAAC,IAAD,CAAiBC,KAAMC,MADzB,IACqCL,EAAKF,iBAD1C,MAC+DE,EAAKM,UAI1EC,MAAM,EAAE,K,YC+CXC,MAzEf,WAAgB,IAAD,EACe9C,mBAAS,GADxB,mBACJqB,EADI,KACG0B,EADH,OAUcjD,EAAS,gCAVvB,mBAUJsB,EAVI,KAUGjB,EAVH,KAoBX,SAAS6C,EAAQC,GACK,SAAdA,EACJF,GAAU1B,EAAQ,GAAKT,KAAKC,MAAMD,KAAKE,UAAUM,IAAQ8B,QAChC,aAAdD,GAEPF,EADU,IAAV1B,EACSA,EAAQT,KAAKC,MAAMD,KAAKE,UAAUM,IAAQ8B,OAAS,EAEnD7B,EAAQ,GA8BzB,OA3CAhB,qBAAU,YACS,IAAXgB,GACA0B,EAAS,KAEd,CAAC1B,IAuCGlB,EACH,yBAAKe,UAAU,WACX,+BAGJ,yBAAKA,UAAU,uBACX,kBAAC,IAAD,CAAiBA,UAAU,oBAAoBwB,KAAMS,IAAaC,KAAK,KAAKC,QAAS,kBAAML,EAAQ,WAAY,IAC/G,yBAAK9B,UAAU,WACX,kBAAC,EAAD,CAAUE,MAAOA,EAAOC,MAAOA,IAC/B,kBAAC,EAAD,CAAOD,MAAOA,EAAOC,MAAOA,KAEhC,kBAAC,IAAD,CAAiBH,UAAU,qBAAqBwB,KAAMY,IAAcF,KAAK,KAAKC,QAAS,kBAAML,EAAQ,eAAgB,O,MC3DlHO,MARf,WACE,OACE,yBAAKrC,UAAU,OACb,kBAAC,EAAD,QCJcsC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.2265af99.chunk.js","sourcesContent":["/*\r\n  This custom hook takes a URL as an argument, then returns a bool value of loading state and the data as a JSON object.\r\n*/\r\n\r\nimport { useState, useEffect } from \"react\";\r\n\r\nfunction useFetch(url) {\r\n  const [data, setData] = useState(null);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  async function fetchUrl() {\r\n    const response = await fetch(url);\r\n    const json = await response.json();\r\n    let returned_data = JSON.parse(JSON.stringify(json));\r\n    if (!('message' in returned_data)){ // Check if API rate limit exceeded. Keeps at loading state if limit exceeded for your IP\r\n      setData(returned_data);\r\n      setLoading(false);\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    fetchUrl();\r\n  }, [url]);  // Some of our components need to re-render themselves with other URLs.\r\n              // So, we pass in \"url\" as a dependency in the array to run useEffect hook with every render with a new URL.\r\n\r\n  return [data, loading];\r\n}\r\n\r\nexport { useFetch }; // In order to use this custom hook function in another component, we have to export it like this\r\n","import React from \"react\";\r\nimport \"../styles/Profile.css\";\r\n\r\n/*\r\n  This function creates a component called Profiles, which displays a name and an image\r\n  that it receives from \"users\" object that is being passed from the main function as a prop, where\r\n  this component is being called and rendered. \r\n\r\n  This component is created in the main function like this:\r\n\r\n        <Profiles users={users} count={count} />\r\n\r\n  As we can see, the prop is receiving two different values called \"count\" and \"users\".\r\n  These become the members of the \"props\" object, and can be called with \"props.\" adjective.\r\n*/\r\n\r\nfunction Profiles(props) {\r\n  return (\r\n    <div className=\"profiles\">\r\n      <img\r\n        className=\"profile-image\"\r\n        src={props.users[props.count].avatar_url}\r\n        alt=\"\"\r\n      />\r\n      <div className=\"username\">\r\n        <a href={props.users[props.count].url}>\r\n            {props.users[props.count].login.replace(/\\w\\S*/g, function(txt) {\r\n              return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();\r\n              })\r\n            }\r\n        </a>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Profiles;","import React from \"react\";\r\nimport { useFetch }  from \"./FetchHook\";\r\n\r\n// Styles\r\nimport \"../styles/Repos.css\";\r\nimport 'font-awesome/css/font-awesome.min.css';\r\nimport { faStar } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\n\r\n/*\r\n  This function displays repositories of the GitHub user that is shown at that time.\r\n*/\r\n\r\nfunction Repos(props) {\r\n  const [userRepos, reposLoading] = useFetch(`https://api.github.com/users/${props.users[props.count].login}/repos`); \r\n  // This URL string has some variables in it which change everytime Repos function receives new props values.\r\n  // In order to express that there will be some variables in our string, we have to use template literals or string literals (``).\r\n  \r\n\r\n  // The rest of the function utilises the same \"loading ?\" ternary logic that we have used in our App function,\r\n  // then displays every repo of the user with the .map() function\r\n     \r\n  return reposLoading ? (\r\n    <div></div>                                                         \r\n\r\n  ) : (\r\n    <div className=\"repos\">\r\n      <hr />\r\n      {\r\n        userRepos.sort((a, b) => (a.stargazers_count < b.stargazers_count) ? 1 : -1) // Sort userRepos by stargazers count\r\n                 .map(function(repo) {                                               // Map the array\r\n                    return ( \r\n                      <div className=\"repo\" key={repo.id}>\r\n                        <a href={repo.html_url}>\r\n                          <FontAwesomeIcon icon={faStar} /> {repo.stargazers_count} - {repo.name}\r\n                        </a>\r\n                      </div>\r\n                    );})\r\n                 .slice(0,5) // Show top five\r\n      }\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Repos;","import React, { useState, useEffect } from 'react';\r\nimport { useFetch } from './FetchHook';\r\nimport Profiles from './Profiles'; // Components can be import like this\r\nimport Repos from './Repos';\r\n\r\n// Styles\r\nimport '../styles/Card.css';\r\nimport '../styles/Ripple.css';\r\nimport 'font-awesome/css/font-awesome.min.css';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faAngleLeft, faAngleRight } from '@fortawesome/free-solid-svg-icons';\r\n\r\nfunction Card(){\r\n    const [count, setCount] = useState(0);\r\n    // A \"useState\" hook takes exactly two parameters. One to store state, one to set state.\r\n    // In this one, \"count\" preserves the state between re-renders\r\n    // \"setCount\" is used to update the \"count\" state when needed.\r\n    // We give it an initial value by passing a method argument. In this case, the initial state is \"0\".\r\n    // The initial state is only used during the first render, which can be set to another state by calling \"setCount\"\r\n    // A state can be any variable; a string, an integer, an object.\r\n\r\n    \r\n    const [users, loading] = useFetch(\"https://api.github.com/users\");\r\n    // useFetch is a custom hook method that takes a URL as an argument and returns data from URL and loading state.\r\n    // Its details can be found in \"components/fetchHook.js\".\r\n\r\n    useEffect(() => {\r\n        if (count === -1) {\r\n            setCount(0);\r\n        }\r\n    }, [count]);\r\n\r\n    function counter(direction) { // This method is used to navigate through \"users\" object and takes arguments that's been sent from navigation buttons\r\n        if (direction === \"next\") {\r\n        setCount((count + 1) % JSON.parse(JSON.stringify(users)).length);\r\n        } else if (direction === \"previous\") {\r\n        if (count === 0) {\r\n            setCount(count + JSON.parse(JSON.stringify(users)).length - 1);\r\n        } else {\r\n            setCount(count - 1);\r\n            }\r\n        }\r\n    }\r\n\r\n    /*\r\n    This is where our main App function returns JSX a template that injects itself into root.\r\n    I have used a simple ternary operation to control which element to display depending on loading state.\r\n\r\n    Ternary operation works like this: condition ? expressionToRunIfTrue : expressionToRunIfFalse\r\n\r\n    If useFetch's loading state is true, meaning data hasn't been returned from that useFetch hook yet,\r\n    the div element in between the first set of brackets will be returned, which is a loading animation.\r\n    However, once useFetch updates the \"loading\" state to false, meaning data has successfully been extracted from URL,\r\n    the other div element will be rendered in the second set of brackets, which contains all the useful components.\r\n    \r\n    I have found this loading logic to be very useful because when I have spent a good two days trying to render the app\r\n    with no luck because all the components and functions depended on data to work, which takes some time to retrieve,\r\n    resulting in errors and application not running/rendering at all. Halting all other stuff until loading phase is done resolves these issues.\r\n    React does not even check if the functions in the second set of brackets has any error beforehand because our ternary operator hands React only\r\n    a loading animation, not all those functional components that relies on data.\r\n\r\n    Our second div has a Profile component, two Icons from Antd library that act like buttons, and a component named Repos. \r\n    You might have noticed that we are passing some variables inside components that are not part of standart HTML/CSS instruction set.\r\n    Those are called props, and they send values to their related component. \r\n    Syntax of this expression looks like: nameInChildComponent={nameInMainFunction}\r\n    In JSX, curly braces are used to specify variables.\r\n    */\r\n\r\n\r\n    return loading ? (      \r\n        <div className=\"loading\">\r\n            <div></div>\r\n        </div> \r\n        ) : (\r\n        <div className=\"card animate-bottom\">\r\n            <FontAwesomeIcon className=\"left-arrow button\" icon={faAngleLeft} size=\"3x\" onClick={() => counter(\"next\")} />{\" \"}\r\n            <div className=\"content\">\r\n                <Profiles users={users} count={count} />\r\n                <Repos users={users} count={count} />\r\n            </div>\r\n            <FontAwesomeIcon className=\"right-arrow button\" icon={faAngleRight} size=\"3x\" onClick={() => counter(\"previous\")} />{\" \"}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Card;","/*\r\nThis project aims to simply demonstrate the new hooks feature of React, which is used to store state in functional components.\r\n*/\r\n\r\nimport React from 'react';\r\n\r\n// Components\r\nimport Card from './components/Card';\r\n\r\n// Styles\r\nimport './styles/App.css';\r\n\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Card />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();"],"sourceRoot":""}